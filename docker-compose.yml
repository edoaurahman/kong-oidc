networks:
  kong-net:
volumes:
  kong-datastore:
  keycloak-datastore:
  redis-datastore:
services:

  kong-migration:
    # profiles:
    #     - migration
    build:
      context: my-kong-app
    # image: edoaurahman/kong:3.9.0-oidc-v2
    command: kong migrations bootstrap
    networks:
      - kong-net
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PORT: 5432
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-1234}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}

  kong-migration-up:
    build:
      context: my-kong-app
    # profiles:
    #   - migration
    # image: edoaurahman/kong:3.9.0-oidc-v2
    command: kong migrations up && kong migrations finish
    networks:
      - kong-net
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PORT: 5432
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
  kong-db:
    image: postgres:14.15-alpine3.21
    volumes:
      - kong-datastore:/var/lib/postgresql/data
    networks:
      - kong-net
    # ports:
      # - "5432:5432"
    environment:
      POSTGRES_USER: ${KONG_PG_USER}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD}
      POSTGRES_DB: ${KONG_PG_DATABASE}

  kong:
    build:
      context: my-kong-app
    # image: edoaurahman/kong:3.9.0-oidc-v2
    container_name: kong
    depends_on:
      - kong-db
      - kong-redis
    networks:
      - kong-net
    ports:
      - "8000:8000" # Listener
      # - "8001:8001" # Admin API
      # - "8443:8443" # Listener  (SSL)
      # - "8444:8444" # Admin API (SSL)
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PORT: 5432
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    restart: always

  konga:
    image: pantsel/konga:latest
    networks:
      - kong-net
    ports:
      - "1337:1337"
    environment:
      NODE_ENV: production
    restart: always

  # Keycloak services
  keycloak-db:
    # profiles:
    #   - keycloak
    image: postgres:14.15-alpine3.21
    volumes:
      - keycloak-datastore:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${KC_POSTGRES_DB}
      POSTGRES_USER: ${KC_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KC_POSTGRES_PASSWORD}
    networks:
      - kong-net

  keycloak:
    # profiles:
    #   - keycloak
    image: keycloak/keycloak:latest
    command: start
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://${KC_DB_URL:-keycloak-db}/${KC_POSTGRES_DB}
      KC_DB_USERNAME: ${KC_POSTGRES_USER}
      KC_DB_PASSWORD: ${KC_POSTGRES_PASSWORD}
      WEBHOOK_URL: http://kong:8000
    ports:
      - ${KC_PORT:-8080}:8080
    restart: always
    depends_on:
      - keycloak-db
    networks:
      - kong-net
    volumes:
      - ./keycloak-providers:/opt/keycloak/providers/
      - ./keycloak-plugins/event-listener/providers:/opt/keycloak/providers/
  
  kong-redis:
    image: redis:alpine3.21
    container_name: redis
    networks:
      - kong-net
    volumes:
      - redis-datastore:/data
