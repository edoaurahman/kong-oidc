{
  "version": 3,
  "sources": ["../../rfc4648/lib/rfc4648.js"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/strict-boolean-expressions */\n\n// ---------------------------------------------------------------------------\n// Specific encodings\n// ---------------------------------------------------------------------------\nvar base16Encoding = {\n  chars: '0123456789ABCDEF',\n  bits: 4\n};\nvar base32Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bits: 5\n};\nvar base32HexEncoding = {\n  chars: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bits: 5\n};\nvar base64Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bits: 6\n};\nvar base64UrlEncoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6\n};\nvar base16 = {\n  parse: function parse(string, opts) {\n    return _parse(string.toUpperCase(), base16Encoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base16Encoding, opts);\n  }\n};\nvar base32 = {\n  parse: function parse(string, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return _parse(opts.loose ? string.toUpperCase().replace(/0/g, 'O').replace(/1/g, 'L').replace(/8/g, 'B') : string, base32Encoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base32Encoding, opts);\n  }\n};\nvar base32hex = {\n  parse: function parse(string, opts) {\n    return _parse(string, base32HexEncoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base32HexEncoding, opts);\n  }\n};\nvar base64 = {\n  parse: function parse(string, opts) {\n    return _parse(string, base64Encoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base64Encoding, opts);\n  }\n};\nvar base64url = {\n  parse: function parse(string, opts) {\n    return _parse(string, base64UrlEncoding, opts);\n  },\n  stringify: function stringify(data, opts) {\n    return _stringify(data, base64UrlEncoding, opts);\n  }\n};\n\n// ---------------------------------------------------------------------------\n// Codec implementation\n// ---------------------------------------------------------------------------\n\nvar codec = {\n  parse: _parse,\n  stringify: _stringify\n};\nfunction _parse(string, encoding, opts) {\n  var _opts$out;\n  if (opts === void 0) {\n    opts = {};\n  }\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {};\n    for (var i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  }\n\n  // The string must have a whole number of bytes:\n  if (!opts.loose && string.length * encoding.bits & 7) {\n    throw new SyntaxError('Invalid padding');\n  }\n\n  // Count the padding bytes:\n  var end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n\n    // If we get a whole number of bytes, there is too much padding:\n    if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n      throw new SyntaxError('Invalid padding');\n    }\n  }\n\n  // Allocate the output:\n  var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0);\n\n  // Parse the data:\n  var bits = 0; // Number of bits currently in the buffer\n  var buffer = 0; // Bits waiting to be written out, MSB first\n  var written = 0; // Next byte to write\n  for (var _i = 0; _i < end; ++_i) {\n    // Read one character from the string:\n    var value = encoding.codes[string[_i]];\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[_i]);\n    }\n\n    // Append the bits to the buffer:\n    buffer = buffer << encoding.bits | value;\n    bits += encoding.bits;\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= encoding.bits || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n}\nfunction _stringify(data, encoding, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var _opts = opts,\n    _opts$pad = _opts.pad,\n    pad = _opts$pad === void 0 ? true : _opts$pad;\n  var mask = (1 << encoding.bits) - 1;\n  var out = '';\n  var bits = 0; // Number of bits currently in the buffer\n  var buffer = 0; // Bits waiting to be written out, MSB first\n  for (var i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | 0xff & data[i];\n    bits += 8;\n\n    // Write out as much as we can:\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & buffer >> bits];\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += encoding.chars[mask & buffer << encoding.bits - bits];\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (out.length * encoding.bits & 7) {\n      out += '=';\n    }\n  }\n  return out;\n}\n\nexport { base16, base32, base32hex, base64, base64url, codec };\n"],
  "mappings": "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",
  "names": ["parse", "stringify"]
}
